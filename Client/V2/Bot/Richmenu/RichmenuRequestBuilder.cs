// <auto-generated/>
using KiotaPosts.Client.Models;
using KiotaPosts.Client.V2.Bot.Richmenu.Alias;
using KiotaPosts.Client.V2.Bot.Richmenu.Batch;
using KiotaPosts.Client.V2.Bot.Richmenu.Bulk;
using KiotaPosts.Client.V2.Bot.Richmenu.Item;
using KiotaPosts.Client.V2.Bot.Richmenu.List;
using KiotaPosts.Client.V2.Bot.Richmenu.Progress;
using KiotaPosts.Client.V2.Bot.Richmenu.Validate;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace KiotaPosts.Client.V2.Bot.Richmenu
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\bot\richmenu
    /// </summary>
    public class RichmenuRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The alias property</summary>
        public KiotaPosts.Client.V2.Bot.Richmenu.Alias.AliasRequestBuilder Alias
        {
            get => new KiotaPosts.Client.V2.Bot.Richmenu.Alias.AliasRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The batch property</summary>
        public KiotaPosts.Client.V2.Bot.Richmenu.Batch.BatchRequestBuilder Batch
        {
            get => new KiotaPosts.Client.V2.Bot.Richmenu.Batch.BatchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bulk property</summary>
        public KiotaPosts.Client.V2.Bot.Richmenu.Bulk.BulkRequestBuilder Bulk
        {
            get => new KiotaPosts.Client.V2.Bot.Richmenu.Bulk.BulkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The list property</summary>
        public KiotaPosts.Client.V2.Bot.Richmenu.List.ListRequestBuilder List
        {
            get => new KiotaPosts.Client.V2.Bot.Richmenu.List.ListRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The progress property</summary>
        public KiotaPosts.Client.V2.Bot.Richmenu.Progress.ProgressRequestBuilder Progress
        {
            get => new KiotaPosts.Client.V2.Bot.Richmenu.Progress.ProgressRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The validate property</summary>
        public KiotaPosts.Client.V2.Bot.Richmenu.Validate.ValidateRequestBuilder Validate
        {
            get => new KiotaPosts.Client.V2.Bot.Richmenu.Validate.ValidateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the KiotaPosts.Client.v2.bot.richmenu.item collection</summary>
        /// <param name="position">ID of a rich menu</param>
        /// <returns>A <see cref="KiotaPosts.Client.V2.Bot.Richmenu.Item.WithRichMenuItemRequestBuilder"/></returns>
        public KiotaPosts.Client.V2.Bot.Richmenu.Item.WithRichMenuItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("richMenuId", position);
                return new KiotaPosts.Client.V2.Bot.Richmenu.Item.WithRichMenuItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.V2.Bot.Richmenu.RichmenuRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RichmenuRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/bot/richmenu", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.V2.Bot.Richmenu.RichmenuRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RichmenuRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/bot/richmenu", rawUrl)
        {
        }
        /// <summary>
        /// Create rich menu
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.RichMenuIdResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<KiotaPosts.Client.Models.RichMenuIdResponse?> PostAsync(KiotaPosts.Client.Models.RichMenuRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<KiotaPosts.Client.Models.RichMenuIdResponse> PostAsync(KiotaPosts.Client.Models.RichMenuRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<KiotaPosts.Client.Models.RichMenuIdResponse>(requestInfo, KiotaPosts.Client.Models.RichMenuIdResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create rich menu
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(KiotaPosts.Client.Models.RichMenuRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(KiotaPosts.Client.Models.RichMenuRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.V2.Bot.Richmenu.RichmenuRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public KiotaPosts.Client.V2.Bot.Richmenu.RichmenuRequestBuilder WithUrl(string rawUrl)
        {
            return new KiotaPosts.Client.V2.Bot.Richmenu.RichmenuRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class RichmenuRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
