// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    /// <summary>
    /// Object containing user membership subscription information.
    /// </summary>
    public class SubscribedMembershipUser : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>UNIX timestamp at which the user subscribed to the membership.</summary>
        public int? JoinedTime { get; set; }
        /// <summary>The user&apos;s member number in the membership plan.</summary>
        public int? MembershipNo { get; set; }
        /// <summary>Next payment date for membership plan.- Format: yyyy-MM-dd (e.g. 2024-02-08)- Timezone: UTC+9</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextBillingDate { get; set; }
#nullable restore
#else
        public string NextBillingDate { get; set; }
#endif
        /// <summary>The period of time in months that the user has been subscribed to a membership plan. If a user previously canceled and then re-subscribed to the same membership plan, only the period after the re-subscription will be counted.</summary>
        public int? TotalSubscriptionMonths { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Models.SubscribedMembershipUser"/> and sets the default values.
        /// </summary>
        public SubscribedMembershipUser()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.SubscribedMembershipUser"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Models.SubscribedMembershipUser CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.SubscribedMembershipUser();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "joinedTime", n => { JoinedTime = n.GetIntValue(); } },
                { "membershipNo", n => { MembershipNo = n.GetIntValue(); } },
                { "nextBillingDate", n => { NextBillingDate = n.GetStringValue(); } },
                { "totalSubscriptionMonths", n => { TotalSubscriptionMonths = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("joinedTime", JoinedTime);
            writer.WriteIntValue("membershipNo", MembershipNo);
            writer.WriteStringValue("nextBillingDate", NextBillingDate);
            writer.WriteIntValue("totalSubscriptionMonths", TotalSubscriptionMonths);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
