// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    #pragma warning disable CS1591
    public class DatetimePickerAction : KiotaPosts.Client.Models.ActionObject, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Data { get; set; }
#nullable restore
#else
        public string Data { get; set; }
#endif
        /// <summary>The initial property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Initial { get; set; }
#nullable restore
#else
        public string Initial { get; set; }
#endif
        /// <summary>The max property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Max { get; set; }
#nullable restore
#else
        public string Max { get; set; }
#endif
        /// <summary>The min property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Min { get; set; }
#nullable restore
#else
        public string Min { get; set; }
#endif
        /// <summary>The mode property</summary>
        public KiotaPosts.Client.Models.DatetimePickerAction_mode? Mode { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.DatetimePickerAction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new KiotaPosts.Client.Models.DatetimePickerAction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.DatetimePickerAction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "data", n => { Data = n.GetStringValue(); } },
                { "initial", n => { Initial = n.GetStringValue(); } },
                { "max", n => { Max = n.GetStringValue(); } },
                { "min", n => { Min = n.GetStringValue(); } },
                { "mode", n => { Mode = n.GetEnumValue<KiotaPosts.Client.Models.DatetimePickerAction_mode>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("data", Data);
            writer.WriteStringValue("initial", Initial);
            writer.WriteStringValue("max", Max);
            writer.WriteStringValue("min", Min);
            writer.WriteEnumValue<KiotaPosts.Client.Models.DatetimePickerAction_mode>("mode", Mode);
        }
    }
}
