// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    #pragma warning disable CS1591
    public class FlexSpan : KiotaPosts.Client.Models.FlexComponent, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The color property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>The decoration property</summary>
        public KiotaPosts.Client.Models.FlexSpan_decoration? Decoration { get; set; }
        /// <summary>The size property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Size { get; set; }
#nullable restore
#else
        public string Size { get; set; }
#endif
        /// <summary>The style property</summary>
        public KiotaPosts.Client.Models.FlexSpan_style? Style { get; set; }
        /// <summary>The text property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>The weight property</summary>
        public KiotaPosts.Client.Models.FlexSpan_weight? Weight { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.FlexSpan"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new KiotaPosts.Client.Models.FlexSpan CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.FlexSpan();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "color", n => { Color = n.GetStringValue(); } },
                { "decoration", n => { Decoration = n.GetEnumValue<KiotaPosts.Client.Models.FlexSpan_decoration>(); } },
                { "size", n => { Size = n.GetStringValue(); } },
                { "style", n => { Style = n.GetEnumValue<KiotaPosts.Client.Models.FlexSpan_style>(); } },
                { "text", n => { Text = n.GetStringValue(); } },
                { "weight", n => { Weight = n.GetEnumValue<KiotaPosts.Client.Models.FlexSpan_weight>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("color", Color);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexSpan_decoration>("decoration", Decoration);
            writer.WriteStringValue("size", Size);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexSpan_style>("style", Style);
            writer.WriteStringValue("text", Text);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexSpan_weight>("weight", Weight);
        }
    }
}
