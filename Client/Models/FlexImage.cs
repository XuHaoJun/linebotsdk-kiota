// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    #pragma warning disable CS1591
    public class FlexImage : KiotaPosts.Client.Models.FlexComponent, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Action</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaPosts.Client.Models.ActionObject? Action { get; set; }
#nullable restore
#else
        public KiotaPosts.Client.Models.ActionObject Action { get; set; }
#endif
        /// <summary>Alignment style in horizontal direction.</summary>
        public KiotaPosts.Client.Models.FlexImage_align? Align { get; set; }
        /// <summary>When this is `true`, an animated image (APNG) plays.You can specify a value of true up to 10 images in a single message.You can&apos;t send messages that exceed this limit.This is `false` by default.Animated images larger than 300 KB aren&apos;t played back.</summary>
        public bool? Animated { get; set; }
        /// <summary>The display style of the image if the aspect ratio of the image and that specified by the aspectRatio property do not match.</summary>
        public KiotaPosts.Client.Models.FlexImage_aspectMode? AspectMode { get; set; }
        /// <summary>Aspect ratio of the image.`{width}:{height}` format.Specify the value of `{width}` and `{height}` in the range from `1` to `100000`.However, you cannot set `{height}` to a value that is more than three times the value of `{width}`.The default value is `1:1`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AspectRatio { get; set; }
#nullable restore
#else
        public string AspectRatio { get; set; }
#endif
        /// <summary>Background color of the image. Use a hexadecimal color code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackgroundColor { get; set; }
#nullable restore
#else
        public string BackgroundColor { get; set; }
#endif
        /// <summary>The ratio of the width or height of this component within the parent box.</summary>
        public int? Flex { get; set; }
        /// <summary>Alignment style in vertical direction.</summary>
        public KiotaPosts.Client.Models.FlexImage_gravity? Gravity { get; set; }
        /// <summary>The minimum amount of space to include before this component in its parent container.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Margin { get; set; }
#nullable restore
#else
        public string Margin { get; set; }
#endif
        /// <summary>Offset.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OffsetBottom { get; set; }
#nullable restore
#else
        public string OffsetBottom { get; set; }
#endif
        /// <summary>Offset.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OffsetEnd { get; set; }
#nullable restore
#else
        public string OffsetEnd { get; set; }
#endif
        /// <summary>Offset.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OffsetStart { get; set; }
#nullable restore
#else
        public string OffsetStart { get; set; }
#endif
        /// <summary>Offset.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OffsetTop { get; set; }
#nullable restore
#else
        public string OffsetTop { get; set; }
#endif
        /// <summary>Reference for offsetTop, offsetBottom, offsetStart, and offsetEnd. Specify one of the following values:`relative`: Use the previous box as reference.`absolute`: Use the top left of parent element as reference. The default value is relative.</summary>
        public KiotaPosts.Client.Models.FlexImage_position? Position { get; set; }
        /// <summary>The maximum image width. This is md by default.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Size { get; set; }
#nullable restore
#else
        public string Size { get; set; }
#endif
        /// <summary>Image URL (Max character limit: 2000)Protocol: HTTPS (TLS 1.2 or later)Image format: JPEG or PNGMaximum image size: 1024Ã—1024 pixelsMaximum file size: 10 MB (300 KB when the animated property is true)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Models.FlexImage"/> and sets the default values.
        /// </summary>
        public FlexImage() : base()
        {
            Size = "md";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.FlexImage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new KiotaPosts.Client.Models.FlexImage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.FlexImage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "action", n => { Action = n.GetObjectValue<KiotaPosts.Client.Models.ActionObject>(KiotaPosts.Client.Models.ActionObject.CreateFromDiscriminatorValue); } },
                { "align", n => { Align = n.GetEnumValue<KiotaPosts.Client.Models.FlexImage_align>(); } },
                { "animated", n => { Animated = n.GetBoolValue(); } },
                { "aspectMode", n => { AspectMode = n.GetEnumValue<KiotaPosts.Client.Models.FlexImage_aspectMode>(); } },
                { "aspectRatio", n => { AspectRatio = n.GetStringValue(); } },
                { "backgroundColor", n => { BackgroundColor = n.GetStringValue(); } },
                { "flex", n => { Flex = n.GetIntValue(); } },
                { "gravity", n => { Gravity = n.GetEnumValue<KiotaPosts.Client.Models.FlexImage_gravity>(); } },
                { "margin", n => { Margin = n.GetStringValue(); } },
                { "offsetBottom", n => { OffsetBottom = n.GetStringValue(); } },
                { "offsetEnd", n => { OffsetEnd = n.GetStringValue(); } },
                { "offsetStart", n => { OffsetStart = n.GetStringValue(); } },
                { "offsetTop", n => { OffsetTop = n.GetStringValue(); } },
                { "position", n => { Position = n.GetEnumValue<KiotaPosts.Client.Models.FlexImage_position>(); } },
                { "size", n => { Size = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<KiotaPosts.Client.Models.ActionObject>("action", Action);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexImage_align>("align", Align);
            writer.WriteBoolValue("animated", Animated);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexImage_aspectMode>("aspectMode", AspectMode);
            writer.WriteStringValue("aspectRatio", AspectRatio);
            writer.WriteStringValue("backgroundColor", BackgroundColor);
            writer.WriteIntValue("flex", Flex);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexImage_gravity>("gravity", Gravity);
            writer.WriteStringValue("margin", Margin);
            writer.WriteStringValue("offsetBottom", OffsetBottom);
            writer.WriteStringValue("offsetEnd", OffsetEnd);
            writer.WriteStringValue("offsetStart", OffsetStart);
            writer.WriteStringValue("offsetTop", OffsetTop);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexImage_position>("position", Position);
            writer.WriteStringValue("size", Size);
            writer.WriteStringValue("url", Url);
        }
    }
}
