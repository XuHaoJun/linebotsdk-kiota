// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    #pragma warning disable CS1591
    public class FlexText : KiotaPosts.Client.Models.FlexComponent, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Action</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaPosts.Client.Models.ActionObject? Action { get; set; }
#nullable restore
#else
        public KiotaPosts.Client.Models.ActionObject Action { get; set; }
#endif
        /// <summary>The adjustMode property</summary>
        public KiotaPosts.Client.Models.FlexText_adjustMode? AdjustMode { get; set; }
        /// <summary>The align property</summary>
        public KiotaPosts.Client.Models.FlexText_align? Align { get; set; }
        /// <summary>The color property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>The contents property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<KiotaPosts.Client.Models.FlexSpan>? Contents { get; set; }
#nullable restore
#else
        public List<KiotaPosts.Client.Models.FlexSpan> Contents { get; set; }
#endif
        /// <summary>The decoration property</summary>
        public KiotaPosts.Client.Models.FlexText_decoration? Decoration { get; set; }
        /// <summary>The flex property</summary>
        public int? Flex { get; set; }
        /// <summary>The gravity property</summary>
        public KiotaPosts.Client.Models.FlexText_gravity? Gravity { get; set; }
        /// <summary>The lineSpacing property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LineSpacing { get; set; }
#nullable restore
#else
        public string LineSpacing { get; set; }
#endif
        /// <summary>The margin property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Margin { get; set; }
#nullable restore
#else
        public string Margin { get; set; }
#endif
        /// <summary>The maxLines property</summary>
        public int? MaxLines { get; set; }
        /// <summary>The offsetBottom property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OffsetBottom { get; set; }
#nullable restore
#else
        public string OffsetBottom { get; set; }
#endif
        /// <summary>The offsetEnd property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OffsetEnd { get; set; }
#nullable restore
#else
        public string OffsetEnd { get; set; }
#endif
        /// <summary>The offsetStart property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OffsetStart { get; set; }
#nullable restore
#else
        public string OffsetStart { get; set; }
#endif
        /// <summary>The offsetTop property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OffsetTop { get; set; }
#nullable restore
#else
        public string OffsetTop { get; set; }
#endif
        /// <summary>The position property</summary>
        public KiotaPosts.Client.Models.FlexText_position? Position { get; set; }
        /// <summary>The scaling property</summary>
        public bool? Scaling { get; set; }
        /// <summary>The size property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Size { get; set; }
#nullable restore
#else
        public string Size { get; set; }
#endif
        /// <summary>The style property</summary>
        public KiotaPosts.Client.Models.FlexText_style? Style { get; set; }
        /// <summary>The text property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>The weight property</summary>
        public KiotaPosts.Client.Models.FlexText_weight? Weight { get; set; }
        /// <summary>The wrap property</summary>
        public bool? Wrap { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.FlexText"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new KiotaPosts.Client.Models.FlexText CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.FlexText();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "action", n => { Action = n.GetObjectValue<KiotaPosts.Client.Models.ActionObject>(KiotaPosts.Client.Models.ActionObject.CreateFromDiscriminatorValue); } },
                { "adjustMode", n => { AdjustMode = n.GetEnumValue<KiotaPosts.Client.Models.FlexText_adjustMode>(); } },
                { "align", n => { Align = n.GetEnumValue<KiotaPosts.Client.Models.FlexText_align>(); } },
                { "color", n => { Color = n.GetStringValue(); } },
                { "contents", n => { Contents = n.GetCollectionOfObjectValues<KiotaPosts.Client.Models.FlexSpan>(KiotaPosts.Client.Models.FlexSpan.CreateFromDiscriminatorValue)?.ToList(); } },
                { "decoration", n => { Decoration = n.GetEnumValue<KiotaPosts.Client.Models.FlexText_decoration>(); } },
                { "flex", n => { Flex = n.GetIntValue(); } },
                { "gravity", n => { Gravity = n.GetEnumValue<KiotaPosts.Client.Models.FlexText_gravity>(); } },
                { "lineSpacing", n => { LineSpacing = n.GetStringValue(); } },
                { "margin", n => { Margin = n.GetStringValue(); } },
                { "maxLines", n => { MaxLines = n.GetIntValue(); } },
                { "offsetBottom", n => { OffsetBottom = n.GetStringValue(); } },
                { "offsetEnd", n => { OffsetEnd = n.GetStringValue(); } },
                { "offsetStart", n => { OffsetStart = n.GetStringValue(); } },
                { "offsetTop", n => { OffsetTop = n.GetStringValue(); } },
                { "position", n => { Position = n.GetEnumValue<KiotaPosts.Client.Models.FlexText_position>(); } },
                { "scaling", n => { Scaling = n.GetBoolValue(); } },
                { "size", n => { Size = n.GetStringValue(); } },
                { "style", n => { Style = n.GetEnumValue<KiotaPosts.Client.Models.FlexText_style>(); } },
                { "text", n => { Text = n.GetStringValue(); } },
                { "weight", n => { Weight = n.GetEnumValue<KiotaPosts.Client.Models.FlexText_weight>(); } },
                { "wrap", n => { Wrap = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<KiotaPosts.Client.Models.ActionObject>("action", Action);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexText_adjustMode>("adjustMode", AdjustMode);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexText_align>("align", Align);
            writer.WriteStringValue("color", Color);
            writer.WriteCollectionOfObjectValues<KiotaPosts.Client.Models.FlexSpan>("contents", Contents);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexText_decoration>("decoration", Decoration);
            writer.WriteIntValue("flex", Flex);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexText_gravity>("gravity", Gravity);
            writer.WriteStringValue("lineSpacing", LineSpacing);
            writer.WriteStringValue("margin", Margin);
            writer.WriteIntValue("maxLines", MaxLines);
            writer.WriteStringValue("offsetBottom", OffsetBottom);
            writer.WriteStringValue("offsetEnd", OffsetEnd);
            writer.WriteStringValue("offsetStart", OffsetStart);
            writer.WriteStringValue("offsetTop", OffsetTop);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexText_position>("position", Position);
            writer.WriteBoolValue("scaling", Scaling);
            writer.WriteStringValue("size", Size);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexText_style>("style", Style);
            writer.WriteStringValue("text", Text);
            writer.WriteEnumValue<KiotaPosts.Client.Models.FlexText_weight>("weight", Weight);
            writer.WriteBoolValue("wrap", Wrap);
        }
    }
}
