// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    #pragma warning disable CS1591
    public class RichMenuResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Array of area objects which define the coordinates and size of tappable areas</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<KiotaPosts.Client.Models.RichMenuArea>? Areas { get; set; }
#nullable restore
#else
        public List<KiotaPosts.Client.Models.RichMenuArea> Areas { get; set; }
#endif
        /// <summary>Text displayed in the chat bar</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChatBarText { get; set; }
#nullable restore
#else
        public string ChatBarText { get; set; }
#endif
        /// <summary>Name of the rich menu. This value can be used to help manage your rich menus and is not displayed to users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>ID of a rich menu</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RichMenuId { get; set; }
#nullable restore
#else
        public string RichMenuId { get; set; }
#endif
        /// <summary>`true` to display the rich menu by default. Otherwise, `false`.</summary>
        public bool? Selected { get; set; }
        /// <summary>Rich menu size</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaPosts.Client.Models.RichMenuSize? Size { get; set; }
#nullable restore
#else
        public KiotaPosts.Client.Models.RichMenuSize Size { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Models.RichMenuResponse"/> and sets the default values.
        /// </summary>
        public RichMenuResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.RichMenuResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Models.RichMenuResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.RichMenuResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "areas", n => { Areas = n.GetCollectionOfObjectValues<KiotaPosts.Client.Models.RichMenuArea>(KiotaPosts.Client.Models.RichMenuArea.CreateFromDiscriminatorValue)?.ToList(); } },
                { "chatBarText", n => { ChatBarText = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "richMenuId", n => { RichMenuId = n.GetStringValue(); } },
                { "selected", n => { Selected = n.GetBoolValue(); } },
                { "size", n => { Size = n.GetObjectValue<KiotaPosts.Client.Models.RichMenuSize>(KiotaPosts.Client.Models.RichMenuSize.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<KiotaPosts.Client.Models.RichMenuArea>("areas", Areas);
            writer.WriteStringValue("chatBarText", ChatBarText);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("richMenuId", RichMenuId);
            writer.WriteBoolValue("selected", Selected);
            writer.WriteObjectValue<KiotaPosts.Client.Models.RichMenuSize>("size", Size);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
