// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    /// <summary>
    /// Limit of the Narrowcast
    /// </summary>
    public class Limit : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The maximum number of narrowcast messages to send.Use this parameter to limit the number of narrowcast messages sent.The recipients will be chosen at random.</summary>
        public int? Max { get; set; }
        /// <summary>If true, the message will be sent within the maximum number of deliverable messages. The default value is `false`.Targets will be selected at random.</summary>
        public bool? UpToRemainingQuota { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Models.Limit"/> and sets the default values.
        /// </summary>
        public Limit()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.Limit"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Models.Limit CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.Limit();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "max", n => { Max = n.GetIntValue(); } },
                { "upToRemainingQuota", n => { UpToRemainingQuota = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("max", Max);
            writer.WriteBoolValue("upToRemainingQuota", UpToRemainingQuota);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
