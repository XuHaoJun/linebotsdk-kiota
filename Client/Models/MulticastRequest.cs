// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    #pragma warning disable CS1591
    public class MulticastRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Name of aggregation unit. Case-sensitive.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CustomAggregationUnits { get; set; }
#nullable restore
#else
        public List<string> CustomAggregationUnits { get; set; }
#endif
        /// <summary>Messages to send</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<KiotaPosts.Client.Models.Message>? Messages { get; set; }
#nullable restore
#else
        public List<KiotaPosts.Client.Models.Message> Messages { get; set; }
#endif
        /// <summary>`true`: The user doesnâ€™t receive a push notification when a message is sent.`false`: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device).The default value is false.</summary>
        public bool? NotificationDisabled { get; set; }
        /// <summary>Array of user IDs. Use userId values which are returned in webhook event objects. Do not use LINE IDs found on LINE.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? To { get; set; }
#nullable restore
#else
        public List<string> To { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Models.MulticastRequest"/> and sets the default values.
        /// </summary>
        public MulticastRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.MulticastRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Models.MulticastRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.MulticastRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "customAggregationUnits", n => { CustomAggregationUnits = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "messages", n => { Messages = n.GetCollectionOfObjectValues<KiotaPosts.Client.Models.Message>(KiotaPosts.Client.Models.Message.CreateFromDiscriminatorValue)?.ToList(); } },
                { "notificationDisabled", n => { NotificationDisabled = n.GetBoolValue(); } },
                { "to", n => { To = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("customAggregationUnits", CustomAggregationUnits);
            writer.WriteCollectionOfObjectValues<KiotaPosts.Client.Models.Message>("messages", Messages);
            writer.WriteBoolValue("notificationDisabled", NotificationDisabled);
            writer.WriteCollectionOfPrimitiveValues<string>("to", To);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
