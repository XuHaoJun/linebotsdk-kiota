// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    #pragma warning disable CS1591
    public class Membership : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>List of membership plan perks.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Benefits { get; set; }
#nullable restore
#else
        public List<string> Benefits { get; set; }
#endif
        /// <summary>The currency of membership.price.</summary>
        public KiotaPosts.Client.Models.Membership_currency? Currency { get; set; }
        /// <summary>Membership plan description.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Payment method for users who subscribe to a membership plan.</summary>
        public bool? IsInAppPurchase { get; set; }
        /// <summary>Membership plan status.</summary>
        public bool? IsPublished { get; set; }
        /// <summary>Number of members subscribed to the membership plan.</summary>
        public int? MemberCount { get; set; }
        /// <summary>The upper limit of members who can subscribe. If no upper limit is set, it will be null.</summary>
        public int? MemberLimit { get; set; }
        /// <summary>Membership plan ID.</summary>
        public int? MembershipId { get; set; }
        /// <summary>Monthly fee for membership plan. (e.g. 1500.00)</summary>
        public double? Price { get; set; }
        /// <summary>Membership plan name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Models.Membership"/> and sets the default values.
        /// </summary>
        public Membership()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.Membership"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Models.Membership CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.Membership();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "benefits", n => { Benefits = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "currency", n => { Currency = n.GetEnumValue<KiotaPosts.Client.Models.Membership_currency>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "isInAppPurchase", n => { IsInAppPurchase = n.GetBoolValue(); } },
                { "isPublished", n => { IsPublished = n.GetBoolValue(); } },
                { "memberCount", n => { MemberCount = n.GetIntValue(); } },
                { "memberLimit", n => { MemberLimit = n.GetIntValue(); } },
                { "membershipId", n => { MembershipId = n.GetIntValue(); } },
                { "price", n => { Price = n.GetDoubleValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("benefits", Benefits);
            writer.WriteEnumValue<KiotaPosts.Client.Models.Membership_currency>("currency", Currency);
            writer.WriteStringValue("description", Description);
            writer.WriteBoolValue("isInAppPurchase", IsInAppPurchase);
            writer.WriteBoolValue("isPublished", IsPublished);
            writer.WriteIntValue("memberCount", MemberCount);
            writer.WriteIntValue("memberLimit", MemberLimit);
            writer.WriteIntValue("membershipId", MembershipId);
            writer.WriteDoubleValue("price", Price);
            writer.WriteStringValue("title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
