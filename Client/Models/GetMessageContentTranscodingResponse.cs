// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    /// <summary>
    /// Transcoding response
    /// </summary>
    public class GetMessageContentTranscodingResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The preparation status. One of:`processing`: Preparing to get content.`succeeded`: Ready to get the content. You can get the content sent by users.`failed`: Failed to prepare to get the content.</summary>
        public KiotaPosts.Client.Models.GetMessageContentTranscodingResponse_status? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Models.GetMessageContentTranscodingResponse"/> and sets the default values.
        /// </summary>
        public GetMessageContentTranscodingResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.GetMessageContentTranscodingResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Models.GetMessageContentTranscodingResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.GetMessageContentTranscodingResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "status", n => { Status = n.GetEnumValue<KiotaPosts.Client.Models.GetMessageContentTranscodingResponse_status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<KiotaPosts.Client.Models.GetMessageContentTranscodingResponse_status>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
