// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    #pragma warning disable CS1591
    public class NarrowcastProgressResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Narrowcast message request accepted time in milliseconds.Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z)Timezone: UTC</summary>
        public DateTimeOffset? AcceptedTime { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Processing of narrowcast message request completion time in milliseconds. Returned when the phase property is succeeded or failed.Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z)Timezone: UTC</summary>
        public DateTimeOffset? CompletedTime { get; set; }
        /// <summary>Error summary. This is only included with a phase property value of failed.One of:`1`: An internal error occurred.`2`: An error occurred because there weren&apos;t enough recipients.`3`: A conflict error of requests occurs because a request that has already been accepted is retried.</summary>
        public long? ErrorCode { get; set; }
        /// <summary>The reason the message failed to be sent. This is only included with a `phase` property value of `failed`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FailedDescription { get; set; }
#nullable restore
#else
        public string FailedDescription { get; set; }
#endif
        /// <summary>The number of users who failed to send the message.</summary>
        public long? FailureCount { get; set; }
        /// <summary>The current status. One of:`waiting`: Messages are not yet ready to be sent. They are currently being filtered or processed in some way.`sending`: Messages are currently being sent.`succeeded`: Messages were sent successfully. This may not mean the messages were successfully received.`failed`: Messages failed to be sent. Use the failedDescription property to find the cause of the failure.</summary>
        public KiotaPosts.Client.Models.NarrowcastProgressResponse_phase? Phase { get; set; }
        /// <summary>The number of users who successfully received the message.</summary>
        public long? SuccessCount { get; set; }
        /// <summary>The number of intended recipients of the message.</summary>
        public long? TargetCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Models.NarrowcastProgressResponse"/> and sets the default values.
        /// </summary>
        public NarrowcastProgressResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.NarrowcastProgressResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Models.NarrowcastProgressResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.NarrowcastProgressResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "acceptedTime", n => { AcceptedTime = n.GetDateTimeOffsetValue(); } },
                { "completedTime", n => { CompletedTime = n.GetDateTimeOffsetValue(); } },
                { "errorCode", n => { ErrorCode = n.GetLongValue(); } },
                { "failedDescription", n => { FailedDescription = n.GetStringValue(); } },
                { "failureCount", n => { FailureCount = n.GetLongValue(); } },
                { "phase", n => { Phase = n.GetEnumValue<KiotaPosts.Client.Models.NarrowcastProgressResponse_phase>(); } },
                { "successCount", n => { SuccessCount = n.GetLongValue(); } },
                { "targetCount", n => { TargetCount = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("acceptedTime", AcceptedTime);
            writer.WriteDateTimeOffsetValue("completedTime", CompletedTime);
            writer.WriteLongValue("errorCode", ErrorCode);
            writer.WriteStringValue("failedDescription", FailedDescription);
            writer.WriteLongValue("failureCount", FailureCount);
            writer.WriteEnumValue<KiotaPosts.Client.Models.NarrowcastProgressResponse_phase>("phase", Phase);
            writer.WriteLongValue("successCount", SuccessCount);
            writer.WriteLongValue("targetCount", TargetCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
